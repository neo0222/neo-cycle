AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  API Gateway

######################################################
# Parameters:
######################################################
Parameters:
  NameTag:
    Type: String
    Default: neo-cycle
    AllowedValues:
      - neo-cycle

######################################################
# Mappings
######################################################
Mappings:
  StackConfig:
    NameTag:
      Value: neo-cycle

######################################################
# Resources
######################################################
Resources:
  ######################################################
  # Rest API
  ######################################################
  NeoCycleRestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 
        - ${NameTag}
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value]
        }
      EndpointConfiguration:
        Types:
          - EDGE


  ######################################################
  # Parkings
  #   - Resource
  #     - path: /parkings
  #   - Method
  #     - POST
  #     - OPTION(for enable CORS)
  #   - Lambda Permission
  ######################################################
  ParkingsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref NeoCycleRestAPI
      ParentId: !GetAtt
        - NeoCycleRestAPI
        - RootResourceId
      PathPart: parkings

  ParkingsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ParkingsResource
      RestApiId: !Ref NeoCycleRestAPI
      MethodResponses: 
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true
      Integration:
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${LambdaParkingRetrieverArn}/invocations
          - {
            LambdaParkingRetrieverArn: {
              'Fn::ImportValue': LambdaParkingRetrieverArn
            }
          }
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
    DependsOn: LambdaParkingsRegistererPermission

  ParkingsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: NeoCycleRestAPI
      ResourceId:
        Ref: ParkingsResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
    DependsOn: ParkingsResource

  LambdaParkingsRegistererPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !ImportValue LambdaParkingRetrieverFunctionName
      Principal: apigateway.amazonaws.com

  ######################################################
  # Reservation
  #   - Resource
  #     - path: /reservation
  #   - Method
  #     - POST
  #     - OPTION(for enable CORS)
  #   - Lambda Permission
  ######################################################
  ReservationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref NeoCycleRestAPI
      ParentId: !GetAtt
        - NeoCycleRestAPI
        - RootResourceId
      PathPart: reservation

  ReservationPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ReservationResource
      RestApiId: !Ref NeoCycleRestAPI
      MethodResponses: 
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true
      Integration:
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${LambdaReservationMakerArn}/invocations
          - {
            LambdaReservationMakerArn: {
              'Fn::ImportValue': LambdaReservationMakerArn
            }
          }
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
    DependsOn: LambdaReservationMakerPermission

  ReservationOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: NeoCycleRestAPI
      ResourceId:
        Ref: ReservationResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
    DependsOn: ReservationResource

  LambdaReservationMakerPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !ImportValue LambdaReservationMakerFunctionName
      Principal: apigateway.amazonaws.com

  ######################################################
  # Cancellation
  #   - Resource
  #     - path: /cancellation
  #   - Method
  #     - POST
  #     - OPTION(for enable CORS)
  #   - Lambda Permission
  ######################################################
  CancellationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref NeoCycleRestAPI
      ParentId: !GetAtt
        - NeoCycleRestAPI
        - RootResourceId
      PathPart: cancellation

  CancellationPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref CancellationResource
      RestApiId: !Ref NeoCycleRestAPI
      MethodResponses: 
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true
      Integration:
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${LambdaReservationCancellerArn}/invocations
          - {
            LambdaReservationCancellerArn: {
              'Fn::ImportValue': LambdaReservationCancellerArn
            }
          }
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
    DependsOn: LambdaReservationCancellerPermission

  CancellationOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: NeoCycleRestAPI
      ResourceId:
        Ref: CancellationResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
    DependsOn: CancellationResource

  LambdaReservationCancellerPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !ImportValue LambdaReservationCancellerFunctionName
      Principal: apigateway.amazonaws.com