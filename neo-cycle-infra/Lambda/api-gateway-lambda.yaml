AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS Lambda

######################################################
# Parameters:
######################################################
Parameters:
  ObjectKeyPrefix:
    Type: String
  NameTag:
    Type: String
    Default: neo-cycle
    AllowedValues:
      - neo-cycle
  EnvName:
    Type: String
    AllowedValues:
      - dev
      - prod
    Description: Enter profile.
  ShareCycleApiKey:
    Type: String
  ShareCycleApiUrl:
    Type: String

######################################################
# Resources
######################################################
Resources:
  LambdaSessionMaintainer:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub ${NameTag}-${EnvName}-lambda
        S3Key: !Sub ${ObjectKeyPrefix}/SessionMaintainer/Deploy.zip
      Environment:
        Variables:
          ENV_NAME: !Ref EnvName
          SHARE_CYCLE_API_KEY: !Ref ShareCycleApiKey
          SHARE_CYCLE_API_URL: !Ref ShareCycleApiUrl
      FunctionName: !Sub ${NameTag}-${EnvName}-SessionMaintainer
      Handler: index.handler
      ReservedConcurrentExecutions: 1
      Role: !ImportValue
        Fn::Sub: ${NameTag}-${EnvName}-RoleSessionMaintainerArn
      Runtime: nodejs12.x
      Timeout: 10
      ReservedConcurrentExecutions: 10

  LambdaSessionSpreader:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub ${NameTag}-${EnvName}-lambda
        S3Key: !Sub ${ObjectKeyPrefix}/SessionSpreader/Deploy.zip
      Environment:
        Variables:
          ENV_NAME: !Ref EnvName
      FunctionName: !Sub ${NameTag}-${EnvName}-SessionSpreader
      Handler: index.handler
      ReservedConcurrentExecutions: 1
      Role: !ImportValue
        Fn::Sub: ${NameTag}-${EnvName}-RoleSessionSpreaderArn
      Runtime: nodejs12.x
      Timeout: 10
      ReservedConcurrentExecutions: 10

  LambdaSessionSpreaderEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !ImportValue
        Fn::Sub: ${NameTag}-common-SessionTableStreamArn
      FunctionName: !Ref LambdaSessionSpreader

  LambdaParkingRetriever:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub ${NameTag}-${EnvName}-lambda
        S3Key: !Sub ${ObjectKeyPrefix}/ParkingRetriever/Deploy.zip
      Environment:
        Variables:
          ENV_NAME: !Ref EnvName
      FunctionName: !Sub ${NameTag}-${EnvName}-ParkingRetriever
      Handler: index.handler
      ReservedConcurrentExecutions: 1
      Role: !ImportValue
        Fn::Sub: ${NameTag}-${EnvName}-RoleParkingRetrieverArn
      Runtime: nodejs12.x
      Timeout: 10
      ReservedConcurrentExecutions: 10

  LambdaReservationMaker:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub ${NameTag}-${EnvName}-lambda
        S3Key: !Sub ${ObjectKeyPrefix}/ReservationMaker/Deploy.zip
      Environment:
        Variables:
          SHARE_CYCLE_API_KEY: !Ref ShareCycleApiKey
          SHARE_CYCLE_API_URL: !Ref ShareCycleApiUrl
      FunctionName: !Sub ${NameTag}-${EnvName}-ReservationMaker
      Handler: index.handler
      ReservedConcurrentExecutions: 1
      Role: !ImportValue
        Fn::Sub: ${NameTag}-${EnvName}-RoleReservationMakerArn
      Runtime: nodejs12.x
      Timeout: 10
      ReservedConcurrentExecutions: 10

  LambdaReservationCanceller:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub ${NameTag}-${EnvName}-lambda
        S3Key: !Sub ${ObjectKeyPrefix}/ReservationCanceller/Deploy.zip
      Environment:
        Variables:
          SHARE_CYCLE_API_KEY: !Ref ShareCycleApiKey
          SHARE_CYCLE_API_URL: !Ref ShareCycleApiUrl
      FunctionName: !Sub ${NameTag}-${EnvName}-ReservationCanceller
      Handler: index.handler
      ReservedConcurrentExecutions: 1
      Role: !ImportValue
        Fn::Sub: ${NameTag}-${EnvName}-RoleReservationCancellerArn
      Runtime: nodejs12.x
      Timeout: 10
      ReservedConcurrentExecutions: 10

  LambdaStatusChecker:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub ${NameTag}-${EnvName}-lambda
        S3Key: !Sub ${ObjectKeyPrefix}/StatusChecker/Deploy.zip
      Environment:
        Variables:
          SHARE_CYCLE_API_KEY: !Ref ShareCycleApiKey
          SHARE_CYCLE_API_URL: !Ref ShareCycleApiUrl
      FunctionName: !Sub ${NameTag}-${EnvName}-StatusChecker
      Handler: index.handler
      ReservedConcurrentExecutions: 1
      Role: !ImportValue
        Fn::Sub: ${NameTag}-${EnvName}-RoleStatusCheckerArn
      Runtime: nodejs12.x
      Timeout: 10
      ReservedConcurrentExecutions: 10

  LambdaParkingNearbyRetriever:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub ${NameTag}-${EnvName}-lambda
        S3Key: !Sub ${ObjectKeyPrefix}/ParkingNearbyRetriever/Deploy.zip
      FunctionName: !Sub ${NameTag}-${EnvName}-ParkingNearbyRetriever
      Handler: index.handler
      ReservedConcurrentExecutions: 1
      Role: !ImportValue
        Fn::Sub: ${NameTag}-${EnvName}-RoleParkingNearbyRetrieverArn
      Runtime: nodejs12.x
      Timeout: 10
      ReservedConcurrentExecutions: 10
      MemorySize: 3008

  LambdaParkingRegisterer:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub ${NameTag}-${EnvName}-lambda
        S3Key: !Sub ${ObjectKeyPrefix}/ParkingRegisterer/Deploy.zip
      Environment:
        Variables:
          ENV_NAME: !Ref EnvName
      FunctionName: !Sub ${NameTag}-${EnvName}-ParkingRegisterer
      Handler: index.handler
      ReservedConcurrentExecutions: 1
      Role: !ImportValue
        Fn::Sub: ${NameTag}-${EnvName}-RoleParkingRegistererArn
      Runtime: nodejs12.x
      Timeout: 10
      ReservedConcurrentExecutions: 10

  LambdaBikeAvailableRetriever:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub ${NameTag}-${EnvName}-lambda
        S3Key: !Sub ${ObjectKeyPrefix}/BikeAvailableRetriever/Deploy.zip
      Environment:
        Variables:
          ENV_NAME: !Ref EnvName
          SHARE_CYCLE_API_KEY: !Ref ShareCycleApiKey
          SHARE_CYCLE_API_URL: !Ref ShareCycleApiUrl
      FunctionName: !Sub ${NameTag}-${EnvName}-BikeAvailableRetriever
      Handler: index.handler
      ReservedConcurrentExecutions: 1
      Role: !ImportValue
        Fn::Sub: ${NameTag}-${EnvName}-RoleBikeAvailableRetrieverArn
      Runtime: nodejs12.x
      Timeout: 10
      ReservedConcurrentExecutions: 10

  LambdaBikeDetector:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub ${NameTag}-${EnvName}-lambda
        S3Key: !Sub ${ObjectKeyPrefix}/BikeDetector/Deploy.zip
      Environment:
        Variables:
          ENV_NAME: !Ref EnvName
      FunctionName: !Sub ${NameTag}-${EnvName}-BikeDetector
      Handler: index.handler
      ReservedConcurrentExecutions: 1
      Role: !ImportValue
        Fn::Sub: ${NameTag}-${EnvName}-RoleBikeDetectorArn
      Runtime: nodejs12.x
      Timeout: 10
      ReservedConcurrentExecutions: 10
  ######################################################
  # Rest API
  ######################################################
  NeoCycleRestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub  ${NameTag}-${EnvName}-api-gateway
      EndpointConfiguration:
        Types:
          - EDGE


  ######################################################
  # Parkings
  #   - Resource
  #     - path: /parkings
  #   - Method
  #     - POST
  #     - OPTION(for enable CORS)
  #   - Lambda Permission
  ######################################################
  ParkingsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref NeoCycleRestAPI
      ParentId: !GetAtt
        - NeoCycleRestAPI
        - RootResourceId
      PathPart: parkings

  ParkingsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ParkingsResource
      RestApiId: !Ref NeoCycleRestAPI
      MethodResponses: 
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true
        - StatusCode: 440
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true            
      Integration:
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${LambdaParkingRetriever.Arn}/invocations
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
          - StatusCode: 440
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
    DependsOn: LambdaParkingsRegistererPermission

  ParkingsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: NeoCycleRestAPI
      ResourceId:
        Ref: ParkingsResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
    DependsOn: ParkingsResource

  LambdaParkingsRegistererPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaParkingRetriever
      Principal: apigateway.amazonaws.com

  ######################################################
  # Parkings/Nearby
  #   - Resource
  #     - path: /parkings/nearby
  #   - Method
  #     - POST
  #     - OPTION(for enable CORS)
  #   - Lambda Permission
  ######################################################
  ParkingsNearbyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref NeoCycleRestAPI
      ParentId: !Ref ParkingsResource
      PathPart: nearby

  ParkingsNearbyPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ParkingsNearbyResource
      RestApiId: !Ref NeoCycleRestAPI
      MethodResponses: 
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true
        - StatusCode: 440
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true            
      Integration:
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${LambdaParkingNearbyRetriever.Arn}/invocations
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
          - StatusCode: 440
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
    DependsOn: LambdaParkingsNearbyRetrieverPermission

  ParkingsNearbyOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: NeoCycleRestAPI
      ResourceId:
        Ref: ParkingsNearbyResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
    DependsOn: ParkingsNearbyResource

  LambdaParkingsNearbyRetrieverPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaParkingNearbyRetriever
      Principal: apigateway.amazonaws.com

  ######################################################
  # Parkings/Registration
  #   - Resource
  #     - path: /parkings/registration
  #   - Method
  #     - POST
  #     - OPTION(for enable CORS)
  #   - Lambda Permission
  ######################################################
  ParkingsRegistrationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref NeoCycleRestAPI
      ParentId: !Ref ParkingsResource
      PathPart: registration

  ParkingsRegistrationPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ParkingsRegistrationResource
      RestApiId: !Ref NeoCycleRestAPI
      MethodResponses: 
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true
        - StatusCode: 440
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true            
      Integration:
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${LambdaParkingRegisterer.Arn}/invocations
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
          - StatusCode: 440
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
    DependsOn: LambdaParkingRegistererPermission

  ParkingsRegistrationOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: NeoCycleRestAPI
      ResourceId:
        Ref: ParkingsRegistrationResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
    DependsOn: ParkingsRegistrationResource

  LambdaParkingRegistererPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaParkingRegisterer
      Principal: apigateway.amazonaws.com

  ######################################################
  # Parkings/Removal
  #   - Resource
  #     - path: /parkings/removal
  #   - Method
  #     - POST
  #     - OPTION(for enable CORS)
  #   - Lambda Permission
  ######################################################
  ParkingsRemovalResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref NeoCycleRestAPI
      ParentId: !Ref ParkingsResource
      PathPart: removal

  ParkingsRemovalPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ParkingsRemovalResource
      RestApiId: !Ref NeoCycleRestAPI
      MethodResponses: 
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true
        - StatusCode: 440
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true            
      Integration:
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${LambdaParkingRegisterer.Arn}/invocations
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
          - StatusCode: 440
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
    DependsOn: LambdaParkingRegistererPermission

  ParkingsRemovalOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: NeoCycleRestAPI
      ResourceId:
        Ref: ParkingsRemovalResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
    DependsOn: ParkingsRemovalResource

  ######################################################
  # Parkings/Update
  #   - Resource
  #     - path: /parkings/update
  #   - Method
  #     - POST
  #     - OPTION(for enable CORS)
  #   - Lambda Permission
  ######################################################
  ParkingsUpdateResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref NeoCycleRestAPI
      ParentId: !Ref ParkingsResource
      PathPart: update

  ParkingsUpdatePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ParkingsUpdateResource
      RestApiId: !Ref NeoCycleRestAPI
      MethodResponses: 
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true
        - StatusCode: 440
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true            
      Integration:
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${LambdaParkingRegisterer.Arn}/invocations
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
          - StatusCode: 440
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
    DependsOn: LambdaParkingRegistererPermission

  ParkingsUpdateOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: NeoCycleRestAPI
      ResourceId:
        Ref: ParkingsUpdateResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
    DependsOn: ParkingsUpdateResource

  ######################################################
  # Reservation
  #   - Resource
  #     - path: /reservation
  #   - Method
  #     - POST
  #     - OPTION(for enable CORS)
  #   - Lambda Permission
  ######################################################
  ReservationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref NeoCycleRestAPI
      ParentId: !GetAtt
        - NeoCycleRestAPI
        - RootResourceId
      PathPart: reservation

  ReservationPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ReservationResource
      RestApiId: !Ref NeoCycleRestAPI
      MethodResponses: 
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true
        - StatusCode: 440
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true
        - StatusCode: 400
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true
      Integration:
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${LambdaReservationMaker.Arn}/invocations
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
          - StatusCode: 440
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
          - StatusCode: 400
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
    DependsOn: LambdaReservationMakerPermission

  ReservationOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: NeoCycleRestAPI
      ResourceId:
        Ref: ReservationResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
    DependsOn: ReservationResource

  LambdaReservationMakerPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaReservationMaker
      Principal: apigateway.amazonaws.com

  ######################################################
  # Cancellation
  #   - Resource
  #     - path: /cancellation
  #   - Method
  #     - POST
  #     - OPTION(for enable CORS)
  #   - Lambda Permission
  ######################################################
  CancellationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref NeoCycleRestAPI
      ParentId: !GetAtt
        - NeoCycleRestAPI
        - RootResourceId
      PathPart: cancellation

  CancellationPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref CancellationResource
      RestApiId: !Ref NeoCycleRestAPI
      MethodResponses: 
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true
        - StatusCode: 440
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true
      Integration:
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${LambdaReservationCanceller.Arn}/invocations
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
          - StatusCode: 440
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
    DependsOn: LambdaReservationCancellerPermission

  CancellationOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: NeoCycleRestAPI
      ResourceId:
        Ref: CancellationResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
    DependsOn: CancellationResource

  LambdaReservationCancellerPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaReservationCanceller
      Principal: apigateway.amazonaws.com

  ######################################################
  # Status
  #   - Resource
  #     - path: /status
  #   - Method
  #     - POST
  #     - OPTION(for enable CORS)
  #   - Lambda Permission
  ######################################################
  StatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref NeoCycleRestAPI
      ParentId: !GetAtt
        - NeoCycleRestAPI
        - RootResourceId
      PathPart: status

  StatusPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref StatusResource
      RestApiId: !Ref NeoCycleRestAPI
      MethodResponses: 
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true
        - StatusCode: 440
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true
      Integration:
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${LambdaStatusChecker.Arn}/invocations
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
          - StatusCode: 440
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
    DependsOn: LambdaStatusCheckerPermission

  StatusOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: NeoCycleRestAPI
      ResourceId:
        Ref: StatusResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
    DependsOn: StatusResource

  LambdaStatusCheckerPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaStatusChecker
      Principal: apigateway.amazonaws.com

  ######################################################
  # Bikes
  #   - Resource
  #     - path: /bikes
  #   - Method
  #     - POST
  #     - OPTION(for enable CORS)
  #   - Lambda Permission
  ######################################################
  BikesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref NeoCycleRestAPI
      ParentId: !GetAtt
        - NeoCycleRestAPI
        - RootResourceId
      PathPart: bikes

  ######################################################
  # Bikes/Nearby
  #   - Resource
  #     - path: /Bikes/available
  #   - Method
  #     - POST
  #     - OPTION(for enable CORS)
  #   - Lambda Permission
  ######################################################
  BikesAvailableResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref NeoCycleRestAPI
      ParentId: !Ref BikesResource
      PathPart: available

  BikesAvailablePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref BikesAvailableResource
      RestApiId: !Ref NeoCycleRestAPI
      MethodResponses: 
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true
        - StatusCode: 440
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true            
      Integration:
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${LambdaBikeAvailableRetriever.Arn}/invocations
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
          - StatusCode: 440
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
    DependsOn: LambdaBikesAvailableRetrieverPermission

  BikesAvailableOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: NeoCycleRestAPI
      ResourceId:
        Ref: BikesAvailableResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
    DependsOn: BikesAvailableResource

  LambdaBikesAvailableRetrieverPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaBikeAvailableRetriever
      Principal: apigateway.amazonaws.com
  
  ######################################################
  # Bikes/Detection
  #   - Resource
  #     - path: /Bikes/detection
  #   - Method
  #     - POST
  #     - OPTION(for enable CORS)
  #   - Lambda Permission
  ######################################################
  BikesDetectionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref NeoCycleRestAPI
      ParentId: !Ref BikesResource
      PathPart: detection

  BikesDetectionPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref BikesDetectionResource
      RestApiId: !Ref NeoCycleRestAPI
      MethodResponses: 
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true
        - StatusCode: 440
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Origin" : true            
      Integration:
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${LambdaBikeDetector.Arn}/invocations
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
          - StatusCode: 440
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin' : "'*'" # 中身を一重引用符で囲う
    DependsOn: LambdaBikesDetectorPermission

  BikesDetectorOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: NeoCycleRestAPI
      ResourceId:
        Ref: BikesDetectionResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
    DependsOn: BikesDetectionResource

  LambdaBikesDetectorPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaBikeDetector
      Principal: apigateway.amazonaws.com

#################################
# Outputs
#################################
Outputs:
  LambdaSessionMaintainerArn:
    Value: !GetAtt LambdaSessionMaintainer.Arn
    Export:
      Name: !Sub ${NameTag}-${EnvName}-LambdaSessionMaintainerArn
  LambdaSessionMaintainerFunctionName:
    Value: !Ref LambdaSessionMaintainer
    Export:
      Name: !Sub ${NameTag}-${EnvName}-LambdaSessionMaintainerFunctionName
  LambdaParkingRetrieverArn:
    Value: !GetAtt LambdaParkingRetriever.Arn
    Export:
      Name: !Sub ${NameTag}-${EnvName}-LambdaParkingRetrieverArn
  LambdaParkingRetrieverFunctionName:
    Value: !Ref LambdaParkingRetriever
    Export:
      Name: !Sub ${NameTag}-${EnvName}-LambdaParkingRetrieverFunctionName
  LambdaReservationMakerArn:
    Value: !GetAtt LambdaReservationMaker.Arn
    Export:
      Name: !Sub ${NameTag}-${EnvName}-LambdaReservationMakerArn
  LambdaReservationMakerFunctionName:
    Value: !Ref LambdaReservationMaker
    Export:
      Name: !Sub ${NameTag}-${EnvName}-LambdaReservationMakerFunctionName
  LambdaReservationCancellerArn:
    Value: !GetAtt LambdaReservationCanceller.Arn
    Export:
      Name: !Sub ${NameTag}-${EnvName}-LambdaReservationCancellerArn
  LambdaReservationCancellerFunctionName:
    Value: !Ref LambdaReservationCanceller
    Export:
      Name: !Sub ${NameTag}-${EnvName}-LambdaReservationCancellerFunctionName
  LambdaStatusCheckerArn:
    Value: !GetAtt LambdaStatusChecker.Arn
    Export:
      Name: !Sub ${NameTag}-${EnvName}-LambdaStatusCheckerArn
  LambdaStatusCheckerName:
    Value: !Ref LambdaStatusChecker
    Export:
      Name: !Sub ${NameTag}-${EnvName}-LambdaStatusCheckerFunctionName
  LambdaParkingNearbyRetrieverArn:
    Value: !GetAtt LambdaParkingNearbyRetriever.Arn
    Export:
      Name: !Sub ${NameTag}-${EnvName}-LambdaSParkingNearbyRetrieverArn
  LambdaSParkingNearbyRetrieverName:
    Value: !Ref LambdaParkingNearbyRetriever
    Export:
      Name: !Sub ${NameTag}-${EnvName}-LambdaParkingNearbyRetrieverName
  LambdaParkingRegistererArn:
    Value: !GetAtt LambdaParkingRegisterer.Arn
    Export:
      Name: !Sub ${NameTag}-${EnvName}-LambdaParkingRegistererArn
  LambdaParkingRegistererName:
    Value: !Ref LambdaParkingRegisterer
    Export:
      Name: !Sub ${NameTag}-${EnvName}-LambdaParkingRegistererName
  LambdaBikeAvailableRetrieverArn:
    Value: !GetAtt LambdaBikeAvailableRetriever.Arn
    Export:
      Name: !Sub ${NameTag}-${EnvName}-LambdaBikeAvailableRetrieverArn
  LambdaBikeAvailableRetrieverName:
    Value: !Ref LambdaBikeAvailableRetriever
    Export:
      Name: !Sub ${NameTag}-${EnvName}-LambdaBikeAvailableRetrieverName
  LambdaBikeDetectorArn:
    Value: !GetAtt LambdaBikeDetector.Arn
    Export:
      Name: !Sub ${NameTag}-${EnvName}-LambdaBikeDetectorArn
  LambdaBikeDetectorName:
    Value: !Ref LambdaBikeDetector
    Export:
      Name: !Sub ${NameTag}-${EnvName}-LambdaBikeDetectorName