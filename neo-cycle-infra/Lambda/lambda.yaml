AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS Lambda

######################################################
# Parameters:
######################################################
Parameters:
  ObjectKeyPrefix:
    Type: String
  EnvName:
    Type: String
    AllowedValues:
      - dev
      - prod
    Description: Enter profile.

######################################################
# Mappings:
######################################################
Mappings:
  StackConfig:
    NameTag:
      Value: neo-cycle

######################################################
# Resources
######################################################
Resources:
  LambdaSessionMaintainer:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub
          - ${NameTag}-${EnvName}-lambda
          - {
            NameTag: !FindInMap [ StackConfig, NameTag, Value ],
            EnvName: !Ref EnvName
          }
        S3Key: !Sub
          - ${ObjectKeyPrefix}/SessionMaintainer/Deploy.zip
          - {
            ObjectKeyPrefix: !Ref ObjectKeyPrefix
          }
      FunctionName: !Sub
        - ${NameTag}-${EnvName}-SessionMaintainer
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
      Handler: index.handler
      ReservedConcurrentExecutions: 1
      Role: !ImportValue
        Fn::Sub:
          - ${NameTag}-${EnvName}-RoleSessionMaintainerArn
          - {
            NameTag: !FindInMap [ StackConfig, NameTag, Value ],
            EnvName: !Ref EnvName
          }
      Runtime: nodejs12.x
      Timeout: 10

  LambdaParkingRetriever:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub
          - ${NameTag}-${EnvName}-lambda
          - {
            NameTag: !FindInMap [ StackConfig, NameTag, Value ],
            EnvName: !Ref EnvName
          }
        S3Key: !Sub
          - ${ObjectKeyPrefix}/ParkingRetriever/Deploy.zip
          - {
            ObjectKeyPrefix: !Ref ObjectKeyPrefix
          }
      Environment:
        Variables:
          PARKING_IDS: 10124,10077,10507
      FunctionName: !Sub
        - ${NameTag}-${EnvName}-ParkingRetriever
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
          }
      Handler: index.handler
      ReservedConcurrentExecutions: 1
      Role: !ImportValue
        Fn::Sub:
          - ${NameTag}-${EnvName}-RoleParkingRetrieverArn
          - {
            NameTag: !FindInMap [ StackConfig, NameTag, Value ],
            EnvName: !Ref EnvName
          }
      Runtime: nodejs12.x
      Timeout: 10

  LambdaReservationMaker:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub
          - ${NameTag}-${EnvName}-lambda
          - {
            NameTag: !FindInMap [ StackConfig, NameTag, Value ],
            EnvName: !Ref EnvName
          }
        S3Key: !Sub
          - ${ObjectKeyPrefix}/ReservationMaker/Deploy.zip
          - {
            ObjectKeyPrefix: !Ref ObjectKeyPrefix
          }
      FunctionName: !Sub
        - ${NameTag}-${EnvName}-ReservationMaker
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
      Handler: index.handler
      ReservedConcurrentExecutions: 1
      Role: !ImportValue
        Fn::Sub:
          - ${NameTag}-${EnvName}-RoleReservationMakerArn
          - {
            NameTag: !FindInMap [ StackConfig, NameTag, Value ],
            EnvName: !Ref EnvName
          }
      Runtime: nodejs12.x
      Timeout: 10

  LambdaReservationCanceller:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub
          - ${NameTag}-${EnvName}-lambda
          - {
            NameTag: !FindInMap [ StackConfig, NameTag, Value ],
            EnvName: !Ref EnvName
          }
        S3Key: !Sub
          - ${ObjectKeyPrefix}/ReservationCanceller/Deploy.zip
          - {
            ObjectKeyPrefix: !Ref ObjectKeyPrefix
          }
      FunctionName: !Sub
        - ${NameTag}-${EnvName}-ReservationCanceller
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
      Handler: index.handler
      ReservedConcurrentExecutions: 1
      Role: !ImportValue
        Fn::Sub:
          - ${NameTag}-${EnvName}-RoleReservationCancellerArn
          - {
            NameTag: !FindInMap [ StackConfig, NameTag, Value ],
            EnvName: !Ref EnvName
          }
      Runtime: nodejs12.x
      Timeout: 10

  LambdaStatusChecker:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub
          - ${NameTag}-${EnvName}-lambda
          - {
            NameTag: !FindInMap [ StackConfig, NameTag, Value ],
            EnvName: !Ref EnvName
          }
        S3Key: !Sub
          - ${ObjectKeyPrefix}/StatusChecker/Deploy.zip
          - {
            ObjectKeyPrefix: !Ref ObjectKeyPrefix
          }
      FunctionName: !Sub
        - ${NameTag}-${EnvName}-StatusChecker
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
      Handler: index.handler
      ReservedConcurrentExecutions: 1
      Role: !ImportValue
        Fn::Sub:
          - ${NameTag}-${EnvName}-RoleStatusCheckerArn
          - {
            NameTag: !FindInMap [ StackConfig, NameTag, Value ],
            EnvName: !Ref EnvName
          }
      Runtime: nodejs12.x
      Timeout: 10

#################################
# Outputs
#################################
Outputs:
  LambdaSessionMaintainerArn:
    Value: !GetAtt LambdaSessionMaintainer.Arn
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-LambdaSessionMaintainerArn
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
  LambdaSessionMaintainerFunctionName:
    Value: !Ref LambdaSessionMaintainer
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-LambdaSessionMaintainerFunctionName
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
  LambdaParkingRetrieverArn:
    Value: !GetAtt LambdaParkingRetriever.Arn
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-LambdaParkingRetrieverArn
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
  LambdaParkingRetrieverFunctionName:
    Value: !Ref LambdaParkingRetriever
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-LambdaParkingRetrieverFunctionName
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
  LambdaReservationMakerArn:
    Value: !GetAtt LambdaReservationMaker.Arn
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-LambdaReservationMakerArn
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
  LambdaReservationMakerFunctionName:
    Value: !Ref LambdaReservationMaker
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-LambdaReservationMakerFunctionName
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
  LambdaReservationCancellerArn:
    Value: !GetAtt LambdaReservationCanceller.Arn
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-LambdaReservationCancellerArn
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
  LambdaReservationCancellerFunctionName:
    Value: !Ref LambdaReservationCanceller
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-LambdaReservationCancellerFunctionName
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
  LambdaStatusCheckerArn:
    Value: !GetAtt LambdaStatusChecker.Arn
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-LambdaStatusCheckerArn
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
  LambdaStatusCheckerName:
    Value: !Ref LambdaStatusChecker
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-LambdaStatusCheckerFunctionName
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }