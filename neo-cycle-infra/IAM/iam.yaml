AWSTemplateFormatVersion: "2010-09-09"

######################################################
# Parameters:
######################################################
Parameters:
  EnvName:
    Type: String
    AllowedValues:
      - dev
      - prod
    Description: Enter profile.
  NameTag:
    Type: String
    Default: neo-cycle
    AllowedValues:
      - neo-cycle
######################################################
# Mappings:
######################################################
Mappings:
  StackConfig:
    ManagedPolicyArns:
      AWSLambdaBasicExecutionRole: arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    NameTag:
      Value: neo-cycle

######################################################
# Resources:
######################################################
Resources:
  #-----------------------
  # ポリシー作成
  #-----------------------
  NeoCycleUserTablePutItemPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: authorize to put item into user dynamodb 
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NameTag}-${EnvName}-USER"

  NeoCycleUserTableGetItemPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: authorize to get item from user dynamodb 
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NameTag}-${EnvName}-USER"

  NeoCycleUserTableUpdateItemPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: authorize to update item in user dynamodb 
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:UpdateItem
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NameTag}-${EnvName}-USER"

  NeoCycleGetParameterPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: authorize to get parameter from ssm
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ssm:getParameter
            Resource:
              - arn:aws:ssm:ap-northeast-1:010660485109:parameter/neo-cycle/php-url

  #-----------------------
  # ロールの作成
  #-----------------------
  RoleSessionMaintainer:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - ${NameTag}-${EnvName}-session-maintainer-role
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
      ManagedPolicyArns:
        - !FindInMap [StackConfig, ManagedPolicyArns, AWSLambdaBasicExecutionRole]
        - !Ref NeoCycleUserTablePutItemPolicy
        - !Ref NeoCycleGetParameterPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
  
  RoleParkingRetriever:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - ${NameTag}-${EnvName}-parking-retriever-role
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
      ManagedPolicyArns:
        - !FindInMap [StackConfig, ManagedPolicyArns, AWSLambdaBasicExecutionRole]
        - !Ref NeoCycleUserTableGetItemPolicy
        - !Ref NeoCycleGetParameterPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com

  RoleReservationMaker:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - ${NameTag}-${EnvName}-reservation-maker-role
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
      ManagedPolicyArns:
        - !FindInMap [StackConfig, ManagedPolicyArns, AWSLambdaBasicExecutionRole]
        - !Ref NeoCycleUserTableGetItemPolicy
        - !Ref NeoCycleGetParameterPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com

  RoleReservationCanceller:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - ${NameTag}-${EnvName}-reservation-canceller-role
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
      ManagedPolicyArns:
        - !FindInMap [StackConfig, ManagedPolicyArns, AWSLambdaBasicExecutionRole]
        - !Ref NeoCycleUserTableGetItemPolicy
        - !Ref NeoCycleGetParameterPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com

  RoleStatusChecker:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - ${NameTag}-${EnvName}-status-checker-role
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
      ManagedPolicyArns:
        - !FindInMap [StackConfig, ManagedPolicyArns, AWSLambdaBasicExecutionRole]
        - !Ref NeoCycleUserTableGetItemPolicy
        - !Ref NeoCycleGetParameterPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com

  RoleParkingNearbyRetriever:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - ${NameTag}-${EnvName}-parking-nearby-retriever-role
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
      ManagedPolicyArns:
        - !FindInMap [StackConfig, ManagedPolicyArns, AWSLambdaBasicExecutionRole]
        - !Ref NeoCycleGetParameterPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com

  RoleUserInitializer:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - ${NameTag}-${EnvName}-user-initializer-role
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
      ManagedPolicyArns:
        - !FindInMap [StackConfig, ManagedPolicyArns, AWSLambdaBasicExecutionRole]
        - !Ref NeoCycleUserTablePutItemPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com              

  RoleParkingRegisterer:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - ${NameTag}-${EnvName}-parking-registerer-role
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
      ManagedPolicyArns:
        - !FindInMap [StackConfig, ManagedPolicyArns, AWSLambdaBasicExecutionRole]
        - !Ref NeoCycleGetParameterPolicy
        - !Ref NeoCycleUserTableUpdateItemPolicy
        - !Ref NeoCycleUserTableGetItemPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com   

  RoleUserMigrator:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - ${NameTag}-${EnvName}-user-migrator-role
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
      ManagedPolicyArns:
        - !FindInMap [StackConfig, ManagedPolicyArns, AWSLambdaBasicExecutionRole]
        - !Ref NeoCycleGetParameterPolicy
        - !Ref NeoCycleUserTablePutItemPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com


  RolePostAuthenticator:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - ${NameTag}-${EnvName}-post-authenticator-role
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
      ManagedPolicyArns:
        - !FindInMap [StackConfig, ManagedPolicyArns, AWSLambdaBasicExecutionRole]
        - !Ref NeoCycleGetParameterPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com 
#################################
# Outputs
#################################
Outputs:
  RoleSessionMaintainerArn:
    Value: !GetAtt RoleSessionMaintainer.Arn
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-RoleSessionMaintainerArn
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }

  RoleParkingRetrieverArn:
    Value: !GetAtt RoleParkingRetriever.Arn
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-RoleParkingRetrieverArn
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }

  RoleReservationMakerArn:
    Value: !GetAtt RoleReservationMaker.Arn
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-RoleReservationMakerArn
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }

  RoleReservationCancellerArn:
    Value: !GetAtt RoleReservationCanceller.Arn
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-RoleReservationCancellerArn
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }

  RoleStatusCheckerArn:
    Value: !GetAtt RoleStatusChecker.Arn
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-RoleStatusCheckerArn
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }
      
  RoleParkingNearbyRetrieverArn:
    Value: !GetAtt RoleParkingNearbyRetriever.Arn
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-RoleParkingNearbyRetrieverArn
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }

  RoleUserInitializerArn:
    Value: !GetAtt RoleUserInitializer.Arn
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-RoleUserInitializerArn
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }

  RoleParkingRegistererArn:
    Value: !GetAtt RoleParkingRegisterer.Arn
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-RoleParkingRegistererArn
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }

  RoleUserMigratorArn:
    Value: !GetAtt RoleUserMigrator.Arn
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-RoleUserMigratorArn
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }

  RolePostAuthenticatorArn:
    Value: !GetAtt RolePostAuthenticator.Arn
    Export:
      Name: !Sub
        - ${NameTag}-${EnvName}-RolePostAuthenticatorArn
        - {
          NameTag: !FindInMap [ StackConfig, NameTag, Value ],
          EnvName: !Ref EnvName
        }